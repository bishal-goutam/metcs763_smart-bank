{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Boston University\\\\Fall 2 2024\\\\MET CS 763 - Software Security\\\\FinalApplication\\\\smart-bank\\\\smart-bank\\\\src\\\\main\\\\resources\\\\static\\\\smart-banking-ui\\\\src\\\\components\\\\AccountList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAccounts, getAccountsByUser } from '../services/api';\nimport '../styles/AccountList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AccountList() {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccountId, setSelectedAccountId] = useState(null); // New state to store selected account ID\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const userRole = localStorage.getItem('userRole');\n    const userId = localStorage.getItem('userId');\n    async function fetchAccounts() {\n      setLoading(true);\n      try {\n        let response;\n        if (userRole === 'BankManager') {\n          response = await getAllAccounts();\n        } else if (userRole === 'User' && userId) {\n          response = await getAccountsByUser(userId);\n        }\n        if (response) {\n          setAccounts(response.data);\n          setError(null);\n        } else {\n          setError(\"No accounts available for this user.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching accounts:\", error);\n        setError(\"Failed to load accounts.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchAccounts();\n  }, []);\n\n  // Handle the \"View Details\" click to display only the selected account\n  const handleViewDetails = accountId => {\n    setSelectedAccountId(accountId);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading accounts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"account-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Accounts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), accounts.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account-cards\",\n      children: accounts.map(account =>\n      // Display only the selected account or all if none is selected\n      (selectedAccountId === null || selectedAccountId === account.id) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `account-card ${selectedAccountId ? 'expanded-card' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: account.account_holder_name || \"Account Holder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Account ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 36\n          }, this), \" \", account.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Balance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 36\n          }, this), \" $\", account.balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions\",\n          children: [localStorage.getItem('userRole') === 'BankManager' && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-button\",\n            onClick: () => handleDelete(account.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 41\n          }, this), selectedAccountId === null && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"view-button\",\n            onClick: () => handleViewDetails(account.id),\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }, this)]\n      }, account.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No accounts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(AccountList, \"dDTfXPu7rO8EOpPWOgoDY2CLq38=\");\n_c = AccountList;\nexport default AccountList;\nvar _c;\n$RefreshReg$(_c, \"AccountList\");","map":{"version":3,"names":["React","useState","useEffect","getAllAccounts","getAccountsByUser","jsxDEV","_jsxDEV","AccountList","_s","accounts","setAccounts","selectedAccountId","setSelectedAccountId","loading","setLoading","error","setError","userRole","localStorage","getItem","userId","fetchAccounts","response","data","console","handleViewDetails","accountId","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","account","id","account_holder_name","balance","onClick","handleDelete","_c","$RefreshReg$"],"sources":["D:/Study/Boston University/Fall 2 2024/MET CS 763 - Software Security/FinalApplication/smart-bank/smart-bank/src/main/resources/static/smart-banking-ui/src/components/AccountList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getAllAccounts, getAccountsByUser } from '../services/api';\r\nimport '../styles/AccountList.css';\r\n\r\nfunction AccountList() {\r\n    const [accounts, setAccounts] = useState([]);\r\n    const [selectedAccountId, setSelectedAccountId] = useState(null); // New state to store selected account ID\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const userRole = localStorage.getItem('userRole');\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        async function fetchAccounts() {\r\n            setLoading(true);\r\n            try {\r\n                let response;\r\n                if (userRole === 'BankManager') {\r\n                    response = await getAllAccounts();\r\n                } else if (userRole === 'User' && userId) {\r\n                    response = await getAccountsByUser(userId);\r\n                }\r\n\r\n                if (response) {\r\n                    setAccounts(response.data);\r\n                    setError(null);\r\n                } else {\r\n                    setError(\"No accounts available for this user.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching accounts:\", error);\r\n                setError(\"Failed to load accounts.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        fetchAccounts();\r\n    }, []);\r\n\r\n    // Handle the \"View Details\" click to display only the selected account\r\n    const handleViewDetails = (accountId) => {\r\n        setSelectedAccountId(accountId);\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading accounts...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"account-list\">\r\n            <h2>Accounts</h2>\r\n            {accounts.length > 0 ? (\r\n                <div className=\"account-cards\">\r\n                    {accounts.map(account => (\r\n                        // Display only the selected account or all if none is selected\r\n                        (selectedAccountId === null || selectedAccountId === account.id) && (\r\n                            <div\r\n                                className={`account-card ${selectedAccountId ? 'expanded-card' : ''}`}\r\n                                key={account.id}\r\n                            >\r\n                                <h3>{account.account_holder_name || \"Account Holder\"}</h3>\r\n                                <p><strong>Account ID:</strong> {account.id}</p>\r\n                                <p><strong>Balance:</strong> ${account.balance}</p>\r\n                                <div className=\"actions\">\r\n                                    {/* Conditionally render the delete button only if role is BankManager */}\r\n                                    {localStorage.getItem('userRole') === 'BankManager' && (\r\n                                        <button className=\"delete-button\" onClick={() => handleDelete(account.id)}>Delete</button>\r\n                                    )}\r\n                                    {selectedAccountId === null && (\r\n                                        <button className=\"view-button\" onClick={() => handleViewDetails(account.id)}>View Details</button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <p>No accounts available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AccountList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}