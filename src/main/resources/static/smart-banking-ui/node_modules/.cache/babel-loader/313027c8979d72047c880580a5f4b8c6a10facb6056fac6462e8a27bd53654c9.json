{"ast":null,"code":"import React,{useState,useEffect}from'react';import{getAllAccounts,getAccountsByUser}from'../services/api';import'../styles/AccountList.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AccountList(){const[accounts,setAccounts]=useState([]);const[selectedAccountId,setSelectedAccountId]=useState(null);// New state to store selected account ID\nconst[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const userRole=localStorage.getItem('userRole');const userId=localStorage.getItem('userId');async function fetchAccounts(){setLoading(true);try{let response;if(userRole==='BankManager'){response=await getAllAccounts();}else if(userRole==='User'&&userId){response=await getAccountsByUser(userId);}if(response){setAccounts(response.data);setError(null);}else{setError(\"No accounts available for this user.\");}}catch(error){console.error(\"Error fetching accounts:\",error);setError(\"Failed to load accounts.\");}finally{setLoading(false);}}fetchAccounts();},[]);// Handle the \"View Details\" click to display only the selected account\nconst handleViewDetails=accountId=>{setSelectedAccountId(accountId);};if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading accounts...\"});}if(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"account-list\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Accounts\"}),accounts.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"account-cards\",children:accounts.map(account=>// Display only the selected account or all if none is selected\n(selectedAccountId===null||selectedAccountId===account.id)&&/*#__PURE__*/_jsxs(\"div\",{className:`account-card ${selectedAccountId?'expanded-card':''}`,children:[/*#__PURE__*/_jsx(\"h3\",{children:account.account_holder_name||\"Account Holder\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Account ID:\"}),\" \",account.id]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Balance:\"}),\" $\",account.balance]}),/*#__PURE__*/_jsxs(\"div\",{className:\"actions\",children:[localStorage.getItem('userRole')==='BankManager'&&/*#__PURE__*/_jsx(\"button\",{className:\"delete-button\",onClick:()=>handleDelete(account.id),children:\"Delete\"}),selectedAccountId===null&&/*#__PURE__*/_jsx(\"button\",{className:\"view-button\",onClick:()=>handleViewDetails(account.id),children:\"View Details\"})]})]},account.id))}):/*#__PURE__*/_jsx(\"p\",{children:\"No accounts available.\"})]});}export default AccountList;","map":{"version":3,"names":["React","useState","useEffect","getAllAccounts","getAccountsByUser","jsx","_jsx","jsxs","_jsxs","AccountList","accounts","setAccounts","selectedAccountId","setSelectedAccountId","loading","setLoading","error","setError","userRole","localStorage","getItem","userId","fetchAccounts","response","data","console","handleViewDetails","accountId","children","className","length","map","account","id","account_holder_name","balance","onClick","handleDelete"],"sources":["D:/Study/Boston University/Fall 2 2024/MET CS 763 - Software Security/FinalApplication/smart-bank/smart-bank/src/main/resources/static/smart-banking-ui/src/components/AccountList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getAllAccounts, getAccountsByUser } from '../services/api';\r\nimport '../styles/AccountList.css';\r\n\r\nfunction AccountList() {\r\n    const [accounts, setAccounts] = useState([]);\r\n    const [selectedAccountId, setSelectedAccountId] = useState(null); // New state to store selected account ID\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const userRole = localStorage.getItem('userRole');\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        async function fetchAccounts() {\r\n            setLoading(true);\r\n            try {\r\n                let response;\r\n                if (userRole === 'BankManager') {\r\n                    response = await getAllAccounts();\r\n                } else if (userRole === 'User' && userId) {\r\n                    response = await getAccountsByUser(userId);\r\n                }\r\n\r\n                if (response) {\r\n                    setAccounts(response.data);\r\n                    setError(null);\r\n                } else {\r\n                    setError(\"No accounts available for this user.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching accounts:\", error);\r\n                setError(\"Failed to load accounts.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        fetchAccounts();\r\n    }, []);\r\n\r\n    // Handle the \"View Details\" click to display only the selected account\r\n    const handleViewDetails = (accountId) => {\r\n        setSelectedAccountId(accountId);\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading accounts...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"account-list\">\r\n            <h2>Accounts</h2>\r\n            {accounts.length > 0 ? (\r\n                <div className=\"account-cards\">\r\n                    {accounts.map(account => (\r\n                        // Display only the selected account or all if none is selected\r\n                        (selectedAccountId === null || selectedAccountId === account.id) && (\r\n                            <div\r\n                                className={`account-card ${selectedAccountId ? 'expanded-card' : ''}`}\r\n                                key={account.id}\r\n                            >\r\n                                <h3>{account.account_holder_name || \"Account Holder\"}</h3>\r\n                                <p><strong>Account ID:</strong> {account.id}</p>\r\n                                <p><strong>Balance:</strong> ${account.balance}</p>\r\n                                <div className=\"actions\">\r\n                                    {/* Conditionally render the delete button only if role is BankManager */}\r\n                                    {localStorage.getItem('userRole') === 'BankManager' && (\r\n                                        <button className=\"delete-button\" onClick={() => handleDelete(account.id)}>Delete</button>\r\n                                    )}\r\n                                    {selectedAccountId === null && (\r\n                                        <button className=\"view-button\" onClick={() => handleViewDetails(account.id)}>View Details</button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <p>No accounts available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AccountList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}