{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api'; // Replace with your Spring Boot backend URL\n\n// Helper function to get authentication credentials from localStorage\nconst getAuthConfig = () => {\n  const username = localStorage.getItem('username');\n  const password = localStorage.getItem('password');\n  return {\n    auth: {\n      username: username,\n      password: password\n    }\n  };\n};\n\n// Login function to authenticate user and save credentials\nexport const login = (username, password) => {\n  return axios.post(`${API_BASE_URL}/auth/login`, {}, {\n    auth: {\n      username: username,\n      password: password\n    }\n  });\n};\n\n// Account-related functions\nexport const getAccount = accountId => axios.get(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\nexport const depositAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/deposit`, {\n  amount\n}, getAuthConfig());\nexport const withdrawAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/withdraw`, {\n  amount\n}, getAuthConfig());\nexport const getAllAccounts = () => axios.get(`${API_BASE_URL}/accounts`, getAuthConfig());\nexport const deleteAccount = accountId => axios.delete(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\nexport const addAccount = accountData => {\n  return axios.post(`${API_BASE_URL}/accounts`, {\n    accountHolderName: accountData.account_holder_name,\n    balance: accountData.balance\n  }, getAuthConfig());\n};\nexport const getAccountsByUser = userId => {\n  return axios.get(`${API_BASE_URL}/accounts/user/${userId}`, getAuthConfig());\n};","map":{"version":3,"names":["axios","API_BASE_URL","getAuthConfig","username","localStorage","getItem","password","auth","login","post","getAccount","accountId","get","depositAmount","amount","put","withdrawAmount","getAllAccounts","deleteAccount","delete","addAccount","accountData","accountHolderName","account_holder_name","balance","getAccountsByUser","userId"],"sources":["D:/Study/Boston University/Fall 2 2024/MET CS 763 - Software Security/FinalApplication/smart-bank/smart-bank/src/main/resources/static/smart-banking-ui/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';  // Replace with your Spring Boot backend URL\r\n\r\n// Helper function to get authentication credentials from localStorage\r\nconst getAuthConfig = () => {\r\n    const username = localStorage.getItem('username');\r\n    const password = localStorage.getItem('password');\r\n    return {\r\n        auth: {\r\n            username: username,\r\n            password: password\r\n        }\r\n    };\r\n};\r\n\r\n// Login function to authenticate user and save credentials\r\nexport const login = (username, password) => {\r\n    return axios.post(`${API_BASE_URL}/auth/login`, {}, {\r\n        auth: {\r\n            username: username,\r\n            password: password\r\n        }\r\n    });\r\n};\r\n\r\n// Account-related functions\r\nexport const getAccount = (accountId) => axios.get(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\r\nexport const depositAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/deposit`, { amount }, getAuthConfig());\r\nexport const withdrawAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/withdraw`, { amount }, getAuthConfig());\r\nexport const getAllAccounts = () => axios.get(`${API_BASE_URL}/accounts`, getAuthConfig());\r\nexport const deleteAccount = (accountId) => axios.delete(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\r\n\r\nexport const addAccount = (accountData) => {\r\n    return axios.post(`${API_BASE_URL}/accounts`, {\r\n        accountHolderName: accountData.account_holder_name,\r\n        balance: accountData.balance\r\n    }, getAuthConfig());\r\n};\r\n\r\nexport const getAccountsByUser = (userId) => {\r\n    return axios.get(`${API_BASE_URL}/accounts/user/${userId}`, getAuthConfig());\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B,CAAC,CAAE;;AAEnD;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,OAAO;IACHE,IAAI,EAAE;MACFJ,QAAQ,EAAEA,QAAQ;MAClBG,QAAQ,EAAEA;IACd;EACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAME,KAAK,GAAGA,CAACL,QAAQ,EAAEG,QAAQ,KAAK;EACzC,OAAON,KAAK,CAACS,IAAI,CAAC,GAAGR,YAAY,aAAa,EAAE,CAAC,CAAC,EAAE;IAChDM,IAAI,EAAE;MACFJ,QAAQ,EAAEA,QAAQ;MAClBG,QAAQ,EAAEA;IACd;EACJ,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAIC,SAAS,IAAKX,KAAK,CAACY,GAAG,CAAC,GAAGX,YAAY,aAAaU,SAAS,EAAE,EAAET,aAAa,CAAC,CAAC,CAAC;AAC5G,OAAO,MAAMW,aAAa,GAAGA,CAACF,SAAS,EAAEG,MAAM,KAAKd,KAAK,CAACe,GAAG,CAAC,GAAGd,YAAY,aAAaU,SAAS,UAAU,EAAE;EAAEG;AAAO,CAAC,EAAEZ,aAAa,CAAC,CAAC,CAAC;AAC3I,OAAO,MAAMc,cAAc,GAAGA,CAACL,SAAS,EAAEG,MAAM,KAAKd,KAAK,CAACe,GAAG,CAAC,GAAGd,YAAY,aAAaU,SAAS,WAAW,EAAE;EAAEG;AAAO,CAAC,EAAEZ,aAAa,CAAC,CAAC,CAAC;AAC7I,OAAO,MAAMe,cAAc,GAAGA,CAAA,KAAMjB,KAAK,CAACY,GAAG,CAAC,GAAGX,YAAY,WAAW,EAAEC,aAAa,CAAC,CAAC,CAAC;AAC1F,OAAO,MAAMgB,aAAa,GAAIP,SAAS,IAAKX,KAAK,CAACmB,MAAM,CAAC,GAAGlB,YAAY,aAAaU,SAAS,EAAE,EAAET,aAAa,CAAC,CAAC,CAAC;AAElH,OAAO,MAAMkB,UAAU,GAAIC,WAAW,IAAK;EACvC,OAAOrB,KAAK,CAACS,IAAI,CAAC,GAAGR,YAAY,WAAW,EAAE;IAC1CqB,iBAAiB,EAAED,WAAW,CAACE,mBAAmB;IAClDC,OAAO,EAAEH,WAAW,CAACG;EACzB,CAAC,EAAEtB,aAAa,CAAC,CAAC,CAAC;AACvB,CAAC;AAED,OAAO,MAAMuB,iBAAiB,GAAIC,MAAM,IAAK;EACzC,OAAO1B,KAAK,CAACY,GAAG,CAAC,GAAGX,YAAY,kBAAkByB,MAAM,EAAE,EAAExB,aAAa,CAAC,CAAC,CAAC;AAChF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}