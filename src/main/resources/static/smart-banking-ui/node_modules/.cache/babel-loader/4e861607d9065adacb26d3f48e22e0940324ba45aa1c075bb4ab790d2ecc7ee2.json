{"ast":null,"code":"import React,{useState,useEffect}from'react';import{getAllAccounts,getAccountsByUser}from'../services/api';import{useNavigate}from'react-router-dom';import TransactionDetails from'./TransactionDetails';// Import TransactionDetails component\nimport NavigationButtons from'./NavigationButtons';// Import  component\nimport'../styles/AccountList.css';import'../styles/GlobalStyles.css';import MainLayout from'./MainLayout';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function AccountList(){const[accounts,setAccounts]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[selectedAccountId,setSelectedAccountId]=useState(null);// State for selected account\nuseEffect(()=>{const userRole=localStorage.getItem('userRole');const userId=localStorage.getItem('userId');async function fetchAccounts(){setLoading(true);try{let response;if(userRole==='BankManager'){response=await getAllAccounts();}else if(userRole==='User'&&userId){response=await getAccountsByUser(userId);}if(response){setAccounts(response.data);setError(null);}else{setError(\"No accounts available for this user.\");}}catch(error){console.error(\"Error fetching accounts:\",error);setError(\"Failed to load accounts.\");}finally{setLoading(false);}}fetchAccounts();},[]);const handleViewDetails=accountId=>{console.log(\"Selected Account ID:\",accountId);setSelectedAccountId(accountId);};const handleBackToAllAccounts=()=>{setSelectedAccountId(null);// Return to the full account list\n};if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading accounts...\"});}if(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error]});}return/*#__PURE__*/_jsx(MainLayout,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"account-list\",children:[/*#__PURE__*/_jsx(NavigationButtons,{showBackToAll:!!selectedAccountId,onBackToAll:handleBackToAllAccounts}),selectedAccountId?/*#__PURE__*/// Display only the selected account with TransactionDetails\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"account-details\",children:accounts.filter(account=>account.id===selectedAccountId).map(account=>/*#__PURE__*/_jsxs(\"div\",{className:\"account-card expanded\",children:[/*#__PURE__*/_jsx(\"h3\",{children:account.account_holder_name||\"Account Holder\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Account ID:\"}),\" \",account.id]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Balance:\"}),\" $\",account.balance]})]},account.id))}),/*#__PURE__*/_jsx(TransactionDetails,{accountId:selectedAccountId}),\"  \"]}):/*#__PURE__*/// Display all accounts with View Details button\n_jsx(\"div\",{className:\"account-cards\",children:accounts.map(account=>/*#__PURE__*/_jsxs(\"div\",{className:\"account-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:account.account_holder_name||\"Account Holder\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Account ID:\"}),\" \",account.id]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Balance:\"}),\" $\",account.balance]}),/*#__PURE__*/_jsx(\"button\",{className:\"view-button\",onClick:()=>handleViewDetails(account.id),children:\"View Details\"})]},account.id))})]})});}export default AccountList;","map":{"version":3,"names":["React","useState","useEffect","getAllAccounts","getAccountsByUser","useNavigate","TransactionDetails","NavigationButtons","MainLayout","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AccountList","accounts","setAccounts","loading","setLoading","error","setError","selectedAccountId","setSelectedAccountId","userRole","localStorage","getItem","userId","fetchAccounts","response","data","console","handleViewDetails","accountId","log","handleBackToAllAccounts","children","className","showBackToAll","onBackToAll","filter","account","id","map","account_holder_name","balance","onClick"],"sources":["D:/Study/Boston University/Fall 2 2024/MET CS 763 - Software Security/FinalApplication/smart-bank/smart-bank/src/main/resources/static/smart-banking-ui/src/components/AccountList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getAllAccounts, getAccountsByUser } from '../services/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport TransactionDetails from './TransactionDetails'; // Import TransactionDetails component\r\nimport NavigationButtons from './NavigationButtons'; // Import  component\r\nimport '../styles/AccountList.css';\r\nimport '../styles/GlobalStyles.css';\r\nimport MainLayout from './MainLayout';\r\n\r\nfunction AccountList() {\r\n    const [accounts, setAccounts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [selectedAccountId, setSelectedAccountId] = useState(null); // State for selected account\r\n\r\n    useEffect(() => {\r\n        const userRole = localStorage.getItem('userRole');\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        async function fetchAccounts() {\r\n            setLoading(true);\r\n            try {\r\n                let response;\r\n                if (userRole === 'BankManager') {\r\n                    response = await getAllAccounts();\r\n                } else if (userRole === 'User' && userId) {\r\n                    response = await getAccountsByUser(userId);\r\n                }\r\n\r\n                if (response) {\r\n                    setAccounts(response.data);\r\n                    setError(null);\r\n                } else {\r\n                    setError(\"No accounts available for this user.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching accounts:\", error);\r\n                setError(\"Failed to load accounts.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        fetchAccounts();\r\n    }, []);\r\n\r\n    const handleViewDetails = (accountId) => {\r\n        console.log(\"Selected Account ID:\", accountId);\r\n        setSelectedAccountId(accountId);\r\n    };\r\n    const handleBackToAllAccounts = () => {\r\n        setSelectedAccountId(null);  // Return to the full account list\r\n    };\r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading accounts...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n    <MainLayout>\r\n    <div className=\"account-list\">\r\n        <NavigationButtons\r\n            showBackToAll={!!selectedAccountId}\r\n            onBackToAll={handleBackToAllAccounts}\r\n        />\r\n        {selectedAccountId ? (\r\n            // Display only the selected account with TransactionDetails\r\n\r\n            <>\r\n                <div className=\"account-details\">\r\n                    {accounts\r\n                        .filter(account => account.id === selectedAccountId)\r\n                        .map(account => (\r\n                            <div className=\"account-card expanded\" key={account.id}>\r\n                                <h3>{account.account_holder_name || \"Account Holder\"}</h3>\r\n                                <p><strong>Account ID:</strong> {account.id}</p>\r\n                                <p><strong>Balance:</strong> ${account.balance}</p>\r\n                            </div>\r\n                        ))}\r\n                </div>\r\n                <TransactionDetails accountId={selectedAccountId}/>  </>\r\n        ) : (\r\n            // Display all accounts with View Details button\r\n            <div className=\"account-cards\">\r\n                {accounts.map(account => (\r\n                    <div className=\"account-card\" key={account.id}>\r\n                        <h3>{account.account_holder_name || \"Account Holder\"}</h3>\r\n                        <p><strong>Account ID:</strong> {account.id}</p>\r\n                        <p><strong>Balance:</strong> ${account.balance}</p>\r\n                        <button\r\n                            className=\"view-button\"\r\n                            onClick={() => handleViewDetails(account.id)}\r\n                        >\r\n                            View Details\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )}\r\n    </div>\r\n    </MainLayout>\r\n    );\r\n}\r\n\r\nexport default AccountList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}