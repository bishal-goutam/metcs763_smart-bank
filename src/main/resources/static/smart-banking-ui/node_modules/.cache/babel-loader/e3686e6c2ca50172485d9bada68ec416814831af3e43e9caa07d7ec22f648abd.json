{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// New Login API call\nexport const login = (username, password) => {\n  return axios.post(`${API_BASE_URL}/auth/login`, {\n    username: username,\n    password: password\n  });\n};\nconst getAuthConfig = () => {\n  const username = localStorage.getItem('username');\n  const password = localStorage.getItem('password');\n  const userId = localStorage.getItem('userId');\n  const role = localStorage.getItem('role');\n  if (username && password) {\n    return {\n      headers: {\n        Authorization: `Basic ${btoa(`${username}:${password}`)}`\n      }\n    };\n  }\n  return {}; // Return an empty object if credentials aren't available\n};\n\n// Other API functions with auth config\nexport const getAccount = accountId => axios.get(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\nexport const depositAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/deposit`, {\n  amount\n}, getAuthConfig());\nexport const withdrawAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/withdraw`, {\n  amount\n}, getAuthConfig());\nexport const getAllAccounts = () => axios.get(`${API_BASE_URL}/accounts`, getAuthConfig());\nexport const deleteAccount = accountId => axios.delete(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\nexport const addAccount = accountData => {\n  return axios.post(`${API_BASE_URL}/accounts`, {\n    accountHolderName: accountData.account_holder_name,\n    balance: accountData.balance\n  }, getAuthConfig());\n};\nexport const getAccountsByUser = userId => {\n  return axios.get(`${API_BASE_URL}/accounts/user/${userId}`, getAuthConfig());\n};\nexport const getTransactionsByAccountId = accountId => {\n  return axios.get(`${API_BASE_URL}/transactions/account/${accountId}`, getAuthConfig());\n};\nexport const internalTransfer = (fromAccountId, toAccountId, amount) => {\n  return axios.post(`${API_BASE_URL}/transfer/internal`, {\n    fromAccountId,\n    toAccountId,\n    amount\n  });\n};\nexport const externalTransfer = (fromAccountId, amount, toRoutingNumber, toAccountNumber) => {\n  return axios.post(`${API_BASE_URL}/transfer/external`, {\n    fromAccountId,\n    amount,\n    toRoutingNumber,\n    toAccountNumber\n  });\n};","map":{"version":3,"names":["axios","API_BASE_URL","login","username","password","post","getAuthConfig","localStorage","getItem","userId","role","headers","Authorization","btoa","getAccount","accountId","get","depositAmount","amount","put","withdrawAmount","getAllAccounts","deleteAccount","delete","addAccount","accountData","accountHolderName","account_holder_name","balance","getAccountsByUser","getTransactionsByAccountId","internalTransfer","fromAccountId","toAccountId","externalTransfer","toRoutingNumber","toAccountNumber"],"sources":["D:/Study/Boston University/Fall 2 2024/MET CS 763 - Software Security/FinalApplication/smart-bank/smart-bank/src/main/resources/static/smart-banking-ui/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n// New Login API call\r\nexport const login = (username, password) => {\r\n    return axios.post(`${API_BASE_URL}/auth/login`, {\r\n        username: username,\r\n        password: password\r\n    });\r\n};\r\n\r\nconst getAuthConfig = () => {\r\n    const username = localStorage.getItem('username');\r\n    const password = localStorage.getItem('password');\r\n    const userId = localStorage.getItem('userId');\r\n    const role = localStorage.getItem('role');\r\n    if (username && password) {\r\n        return {\r\n            headers: {\r\n                Authorization: `Basic ${btoa(`${username}:${password}`)}`,\r\n            }\r\n        };\r\n    }\r\n    return {}; // Return an empty object if credentials aren't available\r\n};\r\n\r\n\r\n// Other API functions with auth config\r\nexport const getAccount = (accountId) => axios.get(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\r\nexport const depositAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/deposit`, { amount }, getAuthConfig());\r\nexport const withdrawAmount = (accountId, amount) => axios.put(`${API_BASE_URL}/accounts/${accountId}/withdraw`, { amount }, getAuthConfig());\r\nexport const getAllAccounts = () => axios.get(`${API_BASE_URL}/accounts`, getAuthConfig());\r\nexport const deleteAccount = (accountId) => axios.delete(`${API_BASE_URL}/accounts/${accountId}`, getAuthConfig());\r\n\r\nexport const addAccount = (accountData) => {\r\n    return axios.post(`${API_BASE_URL}/accounts`, {\r\n        accountHolderName: accountData.account_holder_name,\r\n        balance: accountData.balance\r\n    }, getAuthConfig());\r\n};\r\n\r\nexport const getAccountsByUser = (userId) => {\r\n    return axios.get(`${API_BASE_URL}/accounts/user/${userId}`,getAuthConfig());\r\n};\r\n\r\nexport const getTransactionsByAccountId = (accountId) => {\r\n    return axios.get(`${API_BASE_URL}/transactions/account/${accountId}`, getAuthConfig());\r\n};\r\n\r\nexport const internalTransfer = (fromAccountId, toAccountId, amount) => {\r\n    return axios.post(`${API_BASE_URL}/transfer/internal`, {\r\n        fromAccountId,\r\n        toAccountId,\r\n        amount\r\n    });\r\n};\r\n\r\nexport const externalTransfer = (fromAccountId, amount, toRoutingNumber, toAccountNumber) => {\r\n    return axios.post(`${API_BASE_URL}/transfer/external`, {\r\n        fromAccountId,\r\n        amount,\r\n        toRoutingNumber,\r\n        toAccountNumber\r\n    });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}